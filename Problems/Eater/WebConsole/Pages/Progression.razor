@page "/progression"
@using Solve;
@using System.Threading;
@using Eater.Console;
@inject IJSRuntime jsRunTime;
@inject NavigationManager navigationManager;
@implements IAsyncDisposable;

<h1>Progression</h1>

<div>

	<div id="@ChartContainerId" class="fullPaneView"></div>

</div>

@code {

	const string ChartContainerId = "progressionChart";

	Task chartDispose = Task.CompletedTask;

	protected override Task OnInitializedAsync()
	{
		navigationManager.LocationChanged += HandleLocationChanged!;

		return base.OnInitializedAsync();
	}

	private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
	{
		chartDispose = DisposeChart(chartDispose);
	}

	const string JS_PREFIX = "main.towerProgressionView.";
	const string CHART_INIT = JS_PREFIX + "init";
	const string CHART_DISPOSE = JS_PREFIX + "dispose";

	async Task DisposeChart(Task previous)
	{
		var completed = previous.IsCompleted;
		await previous;
		if (completed) await jsRunTime.InvokeVoidAsync(CHART_DISPOSE);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender) await jsRunTime.InvokeVoidAsync(CHART_INIT, ChartContainerId);
	}

	public async ValueTask DisposeAsync()
	{
		var d = DisposeChart(chartDispose);
		chartDispose = d;
		await d;
	}
}
