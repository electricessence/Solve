@page "/solve-runner/{taskId:int}"
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util

<h1><a href="solve-runner">Runner Control</a> <span class="text-monospace">[@TaskId]</span></h1>

<TaskRunnerControl TaskId="@TaskId" />

@*<ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="100%" Height="300" />*@

@code {
	[Parameter]
	public int TaskId { get; set; }

	private PieConfig? _config;
	private ChartJsPieChart? _pieChartJs;

	protected override void OnInitialized()
	{
		_config = new PieConfig
		{
			Options = new PieOptions
			{
				Title = new OptionsTitle
				{
					Display = true,
					Text = "Sample chart from Blazor"
				},
				Responsive = true,
				Animation = new ArcAnimation
				{
					AnimateRotate = true,
					AnimateScale = true
				}
			}
		};

		_config.Data.Labels.AddRange(new[] { "A", "B", "C", "D" });

		var pieSet = new PieDataset
		{
			BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
			BorderWidth = 0,
			HoverBackgroundColor = ColorUtil.RandomColorString(),
			HoverBorderColor = ColorUtil.RandomColorString(),
			HoverBorderWidth = 1,
			BorderColor = "#ffffff",
		};

		pieSet.Data.AddRange(new double[] { 4, 5, 6, 7 });
		_config.Data.Datasets.Add(pieSet);
	}
}
